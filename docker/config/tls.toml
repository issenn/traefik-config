
## dynamic configuration

[tls]
  [tls.stores]
    [tls.stores.default]
      # [tls.stores.default.defaultCertificate]
      #   certFile = "path/to/cert.crt"
      #   keyFile  = "path/to/cert.key"

  [tls.options]
    [tls.options.default]
      # sniStrict = true
      minVersion = "VersionTLS12"
      cipherSuites = [
        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
        "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305",
        "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305",
        "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
      ]

      # [tls.options.default.clientAuth]
      #   # in PEM format. each file can contain multiple CAs.
      #   caFiles = ["path/to/clientca1.crt", "path/to/clientca2.crt"]
      #   # clientAuthType = "RequireAndVerifyClientCert"
      #   clientAuthType = "NoClientCert"

    [tls.options.other]
      # Cipher suites defined for TLS 1.2 and below cannot be used in TLS 1.3, and vice versa.
      # (https://tools.ietf.org/html/rfc8446)
      # With TLS 1.3, the cipher suites are not configurable (all supported cipher suites are safe in this case).
      # https://golang.org/doc/go1.12#tls_1_3
      minVersion = "VersionTLS13"

  # [[tls.certificates]]
  #   # Note that since no store is defined,
  #   # the certificate below will be stored in the `default` store.
  #   certFile = "/path/to/domain.cert"
  #   keyFile = "/path/to/domain.key"
  #   stores = ["default"]

  # [[tls.certificates]]
  #   certFile = "/path/to/other-domain.cert"
  #   keyFile = "/path/to/other-domain.key"
  #   stores = ["default"]

  # [[tls.certificates]]
  #   certFile = "/Users/issenn/Downloads/archive/cert.pem"
  #   keyFile = "/Users/issenn/Downloads/archive/privkey.pem"
  #   stores = ["default"]
